{"version":3,"file":"main.js","mappings":";;;;AAAA;AACA;AACA;AACA,iCAAiC,WAAW,IAAI,QAAQ,IAAI,qBAAqB,OAAO,WAAW,IAAI,QAAQ;AAC/G;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,sCAAsC,iCAAiC;AACvE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,E","sources":["webpack://tldr-reader/./src/content/main.js"],"sourcesContent":["// Debug logging\nfunction debugLog(message, data = null) {\n    const timestamp = new Date().toISOString();\n    const logMessage = data ? `${timestamp} - ${message}: ${JSON.stringify(data)}` : `${timestamp} - ${message}`;\n    console.log(logMessage);\n}\n\ndebugLog('Content script loaded');\n\n// Extract article content\nfunction extractContent() {\n    debugLog('Extracting content');\n    // Try to find the main article element\n    const article = document.querySelector('article') || \n                   document.querySelector('[role=\"article\"]') || \n                   document.querySelector('.article') || \n                   document.querySelector('.post') || \n                   document.querySelector('.content');\n    \n    if (!article) {\n        debugLog('No article found, using body text');\n        return document.body.innerText;\n    }\n    \n    debugLog('Article found, processing content');\n    // Clone the article to avoid modifying the original\n    const articleClone = article.cloneNode(true);\n    \n    // Remove unwanted elements\n    articleClone.querySelectorAll('script, style, nav, footer, header, aside, .comments, .sidebar').forEach(el => el.remove());\n    \n    return articleClone.innerText.trim();\n}\n\n// Initialize content script\nfunction initialize() {\n    debugLog('Initializing content script');\n    const content = extractContent();\n    \n    // Send content for analysis\n    chrome.runtime.sendMessage({\n        type: 'ANALYZE_CONTENT',\n        content: content\n    });\n\n    // Add highlight styles\n    const style = document.createElement('style');\n    style.textContent = `\n        .tldr-highlight {\n            background-color: #fff3cd;\n            cursor: pointer;\n            border-bottom: 1px dotted #ffc107;\n        }\n        .tldr-highlight:hover {\n            background-color: #ffe69c;\n        }\n    `;\n    document.head.appendChild(style);\n\n    // Highlight key phrases\n    function highlightKeyPhrases() {\n        debugLog('Highlighting key phrases');\n        const keyPhrases = new Set([\n            'important', 'key', 'significant', 'major', 'critical',\n            'essential', 'crucial', 'vital', 'fundamental', 'primary'\n        ]);\n\n        // Function to process text nodes\n        function processTextNode(node) {\n            const text = node.textContent;\n            const words = text.split(/\\s+/);\n            let hasHighlight = false;\n\n            words.forEach(word => {\n                if (keyPhrases.has(word.toLowerCase())) {\n                    hasHighlight = true;\n                }\n            });\n\n            if (hasHighlight) {\n                const span = document.createElement('span');\n                span.innerHTML = text.replace(\n                    new RegExp(`\\\\b(${Array.from(keyPhrases).join('|')})\\\\b`, 'gi'),\n                    '<span class=\"tldr-highlight\" title=\"Click for definition\">$1</span>'\n                );\n                node.parentNode.replaceChild(span, node);\n            }\n        }\n\n        // Walk through all text nodes in the document\n        const walker = document.createTreeWalker(\n            document.body,\n            NodeFilter.SHOW_TEXT,\n            null,\n            false\n        );\n\n        let node;\n        while (node = walker.nextNode()) {\n            processTextNode(node);\n        }\n    }\n\n    highlightKeyPhrases();\n}\n\n// Listen for messages from the side panel\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    debugLog('Received message', message);\n    if (message.type === 'GET_CONTENT') {\n        const content = extractContent();\n        debugLog('Sending content response');\n        sendResponse({ content: content });\n    }\n});\n\n// Initialize when the page is loaded\nif (document.readyState === 'complete') {\n    debugLog('Document already loaded, initializing');\n    initialize();\n} else {\n    debugLog('Waiting for document load');\n    window.addEventListener('load', initialize);\n} "],"names":[],"sourceRoot":""}