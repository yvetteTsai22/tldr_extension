{"version":3,"file":"background.js","mappings":"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","sources":["webpack://tldr-reader/./src/background/service-worker.js"],"sourcesContent":["// Store the OpenAI API key\nlet apiKey = '';\n\n// Debug logging\nfunction debugLog(message, data = null) {\n    const timestamp = new Date().toISOString();\n    const logMessage = data ? `${timestamp} - ${message}: ${JSON.stringify(data)}` : `${timestamp} - ${message}`;\n    console.log(logMessage);\n}\n\n// Initialize the extension\nchrome.runtime.onInstalled.addListener(() => {\n    debugLog('Extension installed/updated');\n    // Request API key from user\n    chrome.storage.local.get(['openaiApiKey'], (result) => {\n        if (!result.openaiApiKey) {\n            debugLog('No API key found, opening options page');\n            chrome.runtime.openOptionsPage();\n        } else {\n            debugLog('API key found in storage');\n            apiKey = result.openaiApiKey;\n        }\n    });\n});\n\n// Handle extension icon click\nchrome.action.onClicked.addListener((tab) => {\n    debugLog('Extension icon clicked', { tabId: tab.id });\n    chrome.sidePanel.open({ tabId: tab.id });\n});\n\n// Handle messages from content script and side panel\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    debugLog('Received message', message);\n    \n    if (message.type === 'ANALYZE_CONTENT') {\n        debugLog('Analyzing content');\n        analyzeContent(message.content)\n            .then(summary => {\n                debugLog('Content analyzed successfully');\n                chrome.runtime.sendMessage({\n                    type: 'CONTENT_ANALYZED',\n                    summary: summary\n                });\n            })\n            .catch(error => {\n                console.error('Error analyzing content:', error);\n                debugLog('Error analyzing content', error);\n                chrome.runtime.sendMessage({\n                    type: 'CONTENT_ANALYZED',\n                    summary: 'Error: Could not analyze content. Please check your API key.'\n                });\n            });\n    } else if (message.type === 'ASK_QUESTION') {\n        debugLog('Processing question', { question: message.question });\n        answerQuestion(message.question, message.content)\n            .then(answer => {\n                debugLog('Question answered successfully');\n                sendResponse({ answer: answer });\n            })\n            .catch(error => {\n                console.error('Error answering question:', error);\n                debugLog('Error answering question', error);\n                sendResponse({ error: 'Could not answer question. Please check your API key.' });\n            });\n        return true; // Required for async sendResponse\n    }\n});\n\n// Analyze content using OpenAI API\nasync function analyzeContent(content) {\n    if (!apiKey) {\n        throw new Error('OpenAI API key not set');\n    }\n\n    debugLog('Sending request to OpenAI API');\n    const systemMessage = `You are an AI assistant that summarizes articles and answers questions about them.\nFor summaries, provide:\n1. Key Takeaways (in a callout):\n   Format as:\n   <div class=\"callout callout-style-default callout-note callout-titled\">\n   <div class=\"callout-header d-flex align-content-center\">\n   <div class=\"callout-icon-container\">\n   <i class=\"callout-icon\"></i>\n   </div>\n   <div class=\"callout-title-container flex-fill\">\n   Key Takeaways\n   </div>\n   </div>\n   <div class=\"callout-body-container callout-body\">\n   <ul>\n   - List 3-5 main points\n   - Keep each point concise\n   - Focus on most important insights\n   </ul>\n   </div>\n   </div>\n\n2. Summary:\n   - Write 2-3 paragraphs\n   - Focus on main ideas and context\n   - Use clear, concise language\n\nFor questions, provide clear and concise answers based on the article content.`;\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n            model: 'gpt-3.5-turbo',\n            messages: [\n                {\n                    role: 'system',\n                    content: systemMessage\n                },\n                {\n                    role: 'user',\n                    content: `Please summarize this article in markdown format, focusing on key points and main ideas:\\n\\n${content}`\n                }\n            ],\n            max_tokens: 500\n        })\n    });\n\n    if (!response.ok) {\n        debugLog('OpenAI API error', { status: response.status });\n        throw new Error('Failed to analyze content');\n    }\n\n    const data = await response.json();\n    debugLog('OpenAI API response', data);\n    return data.choices[0].message.content;\n}\n\n// Answer question using OpenAI API\nasync function answerQuestion(question, content) {\n    if (!apiKey) {\n        throw new Error('OpenAI API key not set');\n    }\n\n    debugLog('Sending question to OpenAI API');\n    const systemMessage = `You are an AI assistant that summarizes articles and answers questions about them.\nFor summaries, provide:\n1. Key Takeaways (in a callout):\n   Format as:\n   <div class=\"callout callout-style-default callout-note callout-titled\">\n   <div class=\"callout-header d-flex align-content-center\">\n   <div class=\"callout-icon-container\">\n   <i class=\"callout-icon\"></i>\n   </div>\n   <div class=\"callout-title-container flex-fill\">\n   Key Takeaways\n   </div>\n   </div>\n   <div class=\"callout-body-container callout-body\">\n   <ul>\n   - List 3-5 main points\n   - Keep each point concise\n   - Focus on most important insights\n   </ul>\n   </div>\n   </div>\n\n2. Summary:\n   - Write 2-3 paragraphs\n   - Focus on main ideas and context\n   - Use clear, concise language\n\nFor questions, provide clear and concise answers based on the article content.`;\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n            model: 'gpt-3.5-turbo',\n            messages: [\n                {\n                    role: 'system',\n                    content: systemMessage\n                },\n                {\n                    role: 'user',\n                    content: `Here is the article content:\\n\\n${content}\\n\\nQuestion: ${question}`\n                }\n            ],\n            max_tokens: 500\n        })\n    });\n\n    if (!response.ok) {\n        debugLog('OpenAI API error', { status: response.status });\n        throw new Error('Failed to answer question');\n    }\n\n    const data = await response.json();\n    debugLog('OpenAI API response', data);\n    return data.choices[0].message.content;\n}\n\n// Handle API key updates\nchrome.storage.onChanged.addListener((changes, namespace) => {\n    if (namespace === 'local' && changes.openaiApiKey) {\n        debugLog('API key updated');\n        apiKey = changes.openaiApiKey.newValue;\n    }\n}); "],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_regeneratorDefine","enumerable","configurable","writable","_invoke","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","apiKey","debugLog","message","data","undefined","timestamp","Date","toISOString","logMessage","concat","JSON","stringify","console","log","chrome","runtime","onInstalled","addListener","storage","local","get","result","openaiApiKey","openOptionsPage","action","onClicked","tab","tabId","id","sidePanel","open","onMessage","sender","sendResponse","type","analyzeContent","content","summary","sendMessage","error","question","answerQuestion","answer","_x","_analyzeContent","_callee","systemMessage","response","_context","Error","fetch","method","headers","body","model","messages","role","max_tokens","ok","status","json","choices","_x2","_x3","_answerQuestion","_callee2","_context2","onChanged","changes","namespace","newValue"],"sourceRoot":""}