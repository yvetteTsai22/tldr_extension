{"version":3,"file":"background.js","mappings":";;;;AAAA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,WAAW,IAAI,QAAQ,IAAI,qBAAqB,OAAO,WAAW,IAAI,QAAQ;AAC/G;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;AACL,CAAC;;AAED;AACA;AACA,yCAAyC,eAAe;AACxD,4BAA4B,eAAe;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,MAAM;AACN,0CAA0C,4BAA4B;AACtE;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C,aAAa;AACb;AACA;AACA;AACA,+BAA+B,gEAAgE;AAC/F,aAAa;AACb,qBAAqB;AACrB;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uCAAuC,OAAO;AAC9C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,mFAAmF,QAAQ;AAC3F;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA,uCAAuC,yBAAyB;AAChE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uCAAuC,OAAO;AAC9C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,gEAAgE,QAAQ,gBAAgB,SAAS;AACjG;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA,uCAAuC,yBAAyB;AAChE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,G","sources":["webpack://tldr-reader/./src/background/service-worker.js"],"sourcesContent":["// Store the OpenAI API key\nlet apiKey = '';\n\n// Debug logging\nfunction debugLog(message, data = null) {\n    const timestamp = new Date().toISOString();\n    const logMessage = data ? `${timestamp} - ${message}: ${JSON.stringify(data)}` : `${timestamp} - ${message}`;\n    console.log(logMessage);\n}\n\n// Initialize the extension\nchrome.runtime.onInstalled.addListener(() => {\n    debugLog('Extension installed/updated');\n    // Request API key from user\n    chrome.storage.local.get(['openaiApiKey'], (result) => {\n        if (!result.openaiApiKey) {\n            debugLog('No API key found, opening options page');\n            chrome.runtime.openOptionsPage();\n        } else {\n            debugLog('API key found in storage');\n            apiKey = result.openaiApiKey;\n        }\n    });\n});\n\n// Handle extension icon click\nchrome.action.onClicked.addListener((tab) => {\n    debugLog('Extension icon clicked', { tabId: tab.id });\n    chrome.sidePanel.open({ tabId: tab.id });\n});\n\n// Handle messages from content script and side panel\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    debugLog('Received message', message);\n    \n    if (message.type === 'ANALYZE_CONTENT') {\n        debugLog('Analyzing content');\n        analyzeContent(message.content)\n            .then(summary => {\n                debugLog('Content analyzed successfully');\n                chrome.runtime.sendMessage({\n                    type: 'CONTENT_ANALYZED',\n                    summary: summary\n                });\n            })\n            .catch(error => {\n                console.error('Error analyzing content:', error);\n                debugLog('Error analyzing content', error);\n                chrome.runtime.sendMessage({\n                    type: 'CONTENT_ANALYZED',\n                    summary: 'Error: Could not analyze content. Please check your API key.'\n                });\n            });\n    } else if (message.type === 'ASK_QUESTION') {\n        debugLog('Processing question', { question: message.question });\n        answerQuestion(message.question, message.content)\n            .then(answer => {\n                debugLog('Question answered successfully');\n                sendResponse({ answer: answer });\n            })\n            .catch(error => {\n                console.error('Error answering question:', error);\n                debugLog('Error answering question', error);\n                sendResponse({ error: 'Could not answer question. Please check your API key.' });\n            });\n        return true; // Required for async sendResponse\n    }\n});\n\n// Analyze content using OpenAI API\nasync function analyzeContent(content) {\n    if (!apiKey) {\n        throw new Error('OpenAI API key not set');\n    }\n\n    debugLog('Sending request to OpenAI API');\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n            model: 'gpt-3.5-turbo',\n            messages: [\n                {\n                    role: 'system',\n                    content: 'You are a helpful assistant that summarizes articles and answers questions about them.'\n                },\n                {\n                    role: 'user',\n                    content: `Please summarize this article in bullet points:\\n\\n${content}`\n                }\n            ],\n            max_tokens: 500\n        })\n    });\n\n    if (!response.ok) {\n        debugLog('OpenAI API error', { status: response.status });\n        throw new Error('Failed to analyze content');\n    }\n\n    const data = await response.json();\n    debugLog('OpenAI API response', data);\n    return data.choices[0].message.content;\n}\n\n// Answer question using OpenAI API\nasync function answerQuestion(question, content) {\n    if (!apiKey) {\n        throw new Error('OpenAI API key not set');\n    }\n\n    debugLog('Sending question to OpenAI API');\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n            model: 'gpt-3.5-turbo',\n            messages: [\n                {\n                    role: 'system',\n                    content: 'You are a helpful assistant that answers questions about articles.'\n                },\n                {\n                    role: 'user',\n                    content: `Here is the article content:\\n\\n${content}\\n\\nQuestion: ${question}`\n                }\n            ],\n            max_tokens: 500\n        })\n    });\n\n    if (!response.ok) {\n        debugLog('OpenAI API error', { status: response.status });\n        throw new Error('Failed to answer question');\n    }\n\n    const data = await response.json();\n    debugLog('OpenAI API response', data);\n    return data.choices[0].message.content;\n}\n\n// Handle API key updates\nchrome.storage.onChanged.addListener((changes, namespace) => {\n    if (namespace === 'local' && changes.openaiApiKey) {\n        debugLog('API key updated');\n        apiKey = changes.openaiApiKey.newValue;\n    }\n}); "],"names":[],"sourceRoot":""}