{"version":3,"file":"panel.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,WAAW,IAAI,QAAQ,IAAI,qBAAqB,OAAO,WAAW,IAAI,QAAQ;AAC/G;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sCAAsC,uCAAuC,KAAK,qBAAqB;AACvG;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA,sBAAsB,cAAc;AACpC;AACA,SAAS;AACT;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,mCAAmC;AACtF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,yEAAyE,qBAAqB;AAC9F;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA+C,mCAAmC;AAClF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,qEAAqE,qBAAqB;AAC1F;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,yCAAyC,eAAe;AACxD;AACA,sCAAsC,KAAK;AAC3C;AACA;AACA;AACA;;AAEA;AACA,2D","sources":["webpack://tldr-reader/./src/sidepanel/panel.js"],"sourcesContent":["// DOM Elements\nconst summaryElement = document.getElementById('summary');\nconst chatMessages = document.getElementById('chat-messages');\nconst questionInput = document.getElementById('question-input');\nconst askButton = document.getElementById('ask-button');\n\n// Section headers and content\nconst summaryHeader = document.getElementById('summary-header');\nconst summaryContent = document.getElementById('summary-content');\nconst chatHeader = document.getElementById('chat-header');\nconst chatContent = document.getElementById('chat-content');\n\n// Debug logging\nfunction debugLog(message, data = null) {\n    const timestamp = new Date().toISOString();\n    const logMessage = data ? `${timestamp} - ${message}: ${JSON.stringify(data)}` : `${timestamp} - ${message}`;\n    console.log(logMessage);\n}\n\n// Initialize the side panel\nfunction initialize() {\n    debugLog('Initializing side panel');\n    \n    // Set up section toggles\n    setupSectionToggle(summaryHeader, summaryContent);\n    setupSectionToggle(chatHeader, chatContent);\n\n    // Set up summary generation\n    summaryHeader.addEventListener('click', generateSummary);\n    \n    debugLog('Side panel initialized');\n}\n\n// Set up section toggle functionality\nfunction setupSectionToggle(header, content) {\n    header.addEventListener('click', () => {\n        const isActive = content.classList.contains('active');\n        debugLog(`Toggling section: ${header.querySelector('h2').textContent}`, { isActive: !isActive });\n        content.classList.toggle('active');\n        header.querySelector('.toggle-icon').classList.toggle('active');\n    });\n}\n\n// Inject content script into the current tab\nasync function injectContentScript(tabId) {\n    debugLog('Injecting content script', { tabId });\n    try {\n        await chrome.scripting.executeScript({\n            target: { tabId: tabId },\n            files: ['main.js']\n        });\n        debugLog('Content script injected successfully');\n        return true;\n    } catch (error) {\n        console.error('Error injecting content script:', error);\n        debugLog('Content script injection error', error);\n        return false;\n    }\n}\n\n// Generate summary when section is clicked\nasync function generateSummary() {\n    if (summaryElement.textContent === 'Click to generate summary...') {\n        debugLog('Generating summary');\n        summaryElement.textContent = 'Generating summary...';\n        \n        try {\n            // Get current tab\n            const tabs = await chrome.tabs.query({ active: true, currentWindow: true });\n            debugLog('Current tab', tabs[0]);\n            \n            if (!tabs[0]) {\n                throw new Error('No active tab found');\n            }\n\n            // Inject content script if not already injected\n            const injected = await injectContentScript(tabs[0].id);\n            if (!injected) {\n                throw new Error('Failed to inject content script');\n            }\n\n            // Wait a moment for the script to initialize\n            await new Promise(resolve => setTimeout(resolve, 100));\n\n            // Get content from the page\n            const response = await chrome.tabs.sendMessage(tabs[0].id, { type: 'GET_CONTENT' });\n            debugLog('Content response', response);\n            \n            if (!response || !response.content) {\n                throw new Error('Could not get page content');\n            }\n\n            // Send content for analysis\n            debugLog('Sending content for analysis');\n            chrome.runtime.sendMessage({\n                type: 'ANALYZE_CONTENT',\n                content: response.content\n            });\n        } catch (error) {\n            console.error('Error generating summary:', error);\n            debugLog('Summary generation error', error);\n            summaryElement.textContent = 'Error: Could not generate summary. Please try again.';\n        }\n    }\n}\n\n// Handle incoming messages\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    debugLog('Received message', message);\n    \n    if (message.type === 'CONTENT_ANALYZED') {\n        debugLog('Updating summary with analyzed content');\n        summaryElement.textContent = message.summary;\n    }\n});\n\n// Handle ask button click\naskButton.addEventListener('click', async () => {\n    const question = questionInput.value.trim();\n    if (!question) return;\n\n    debugLog('Processing question', question);\n\n    // Add user question to chat\n    addMessageToChat('user', question);\n    questionInput.value = '';\n    questionInput.disabled = true;\n    askButton.disabled = true;\n\n    try {\n        // Get current tab\n        const tabs = await chrome.tabs.query({ active: true, currentWindow: true });\n        debugLog('Current tab for question', tabs[0]);\n        \n        if (!tabs[0]) {\n            throw new Error('No active tab found');\n        }\n\n        // Inject content script if not already injected\n        const injected = await injectContentScript(tabs[0].id);\n        if (!injected) {\n            throw new Error('Failed to inject content script');\n        }\n\n        // Wait a moment for the script to initialize\n        await new Promise(resolve => setTimeout(resolve, 100));\n\n        const response = await chrome.tabs.sendMessage(tabs[0].id, { type: 'GET_CONTENT' });\n        debugLog('Content response for question', response);\n        \n        if (!response || !response.content) {\n            throw new Error('Could not get page content');\n        }\n\n        // Send question to background script\n        debugLog('Sending question to background script');\n        chrome.runtime.sendMessage({\n            type: 'ASK_QUESTION',\n            question: question,\n            content: response.content\n        }, (answer) => {\n            debugLog('Received answer', answer);\n            \n            if (answer.error) {\n                addMessageToChat('error', answer.error);\n            } else if (answer.answer) {\n                addMessageToChat('assistant', answer.answer);\n            }\n            questionInput.disabled = false;\n            askButton.disabled = false;\n            questionInput.focus();\n        });\n    } catch (error) {\n        console.error('Error asking question:', error);\n        debugLog('Question error', error);\n        addMessageToChat('error', 'Sorry, I encountered an error while processing your question.');\n        questionInput.disabled = false;\n        askButton.disabled = false;\n    }\n});\n\n// Add message to chat\nfunction addMessageToChat(role, content) {\n    debugLog('Adding message to chat', { role, content });\n    const messageDiv = document.createElement('div');\n    messageDiv.className = `message ${role}`;\n    messageDiv.textContent = content;\n    chatMessages.appendChild(messageDiv);\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n}\n\n// Initialize when the panel loads\ndocument.addEventListener('DOMContentLoaded', initialize); "],"names":[],"sourceRoot":""}